const { Sequelize } = require('sequelize');

const sequelize = new Sequelize({
  dialect: 'oracle',
  host: '172.16.32.73',
  port: 1521,
  database: 'DWREPO',
  username: 'CGBRITO',
  password: 'cgkbrito',
  logging: false
});

async function createMenusTable() {
  try {
    console.log('üîå Conectando a Oracle...');
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n exitosa a Oracle');
    
    // 1. Verificar si la tabla MENUS existe
    console.log('\n1Ô∏è‚É£ Verificando si existe la tabla MENUS...');
    const tableExists = await sequelize.query(`
      SELECT COUNT(*) as total FROM USER_TABLES WHERE TABLE_NAME = 'MENUS'
    `, { type: 'SELECT' });
    
    if (tableExists[0].TOTAL > 0) {
      console.log('‚úÖ La tabla MENUS ya existe');
    } else {
      console.log('‚ùå La tabla MENUS no existe, cre√°ndola...');
      
      // 2. Crear la tabla MENUS
      await sequelize.query(`
        CREATE TABLE CGBRITO.MENUS (
          ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          NAME VARCHAR2(100) NOT NULL,
          LABEL VARCHAR2(200) NOT NULL,
          ROUTE VARCHAR2(200),
          ICON VARCHAR2(100),
          SECTION VARCHAR2(100),
          PARENT_ID NUMBER,
          ORDER_INDEX NUMBER DEFAULT 0,
          IS_ACTIVE NUMBER(1) DEFAULT 1,
          CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `, { type: 'DDL' });
      
      console.log('‚úÖ Tabla MENUS creada exitosamente');
    }
    
    // 3. Verificar si hay datos en la tabla
    console.log('\n2Ô∏è‚É£ Verificando datos en la tabla MENUS...');
    const menuCount = await sequelize.query(`
      SELECT COUNT(*) as total FROM CGBRITO.MENUS
    `, { type: 'SELECT' });
    
    console.log(`üìä Men√∫s existentes: ${menuCount[0].TOTAL}`);
    
    if (menuCount[0].TOTAL === 0) {
      console.log('üìã Insertando men√∫s b√°sicos del sistema...');
      
      // 4. Insertar men√∫s b√°sicos
      const basicMenus = [
        { name: 'dashboard', label: 'Dashboard', route: '/dashboard', icon: 'HomeIcon', section: 'Principal', orderIndex: 1 },
        { name: 'usuarios', label: 'Usuarios', route: '/usuarios', icon: 'UsersIcon', section: 'Administraci√≥n', orderIndex: 2 },
        { name: 'roles', label: 'Roles', route: '/roles', icon: 'ShieldIcon', section: 'Administraci√≥n', orderIndex: 3 },
        { name: 'ejecutivos', label: 'Ejecutivos', route: '/ejecutivos', icon: 'UserCheckIcon', section: 'Gesti√≥n', orderIndex: 4 },
        { name: 'tickets', label: 'Tickets', route: '/tickets', icon: 'TicketIcon', section: 'Gesti√≥n', orderIndex: 5 },
        { name: 'cartera', label: 'Cartera', route: '/cartera', icon: 'WalletIcon', section: 'Financiero', orderIndex: 6 },
        { name: 'pagos', label: 'Pagos', route: '/pagos', icon: 'CreditCardIcon', section: 'Financiero', orderIndex: 7 },
        { name: 'reportes', label: 'Reportes', route: '/reportes', icon: 'BarChartIcon', section: 'An√°lisis', orderIndex: 8 },
        { name: 'notificaciones', label: 'Notificaciones', route: '/notificaciones', icon: 'BellIcon', section: 'Sistema', orderIndex: 9 },
        { name: 'cuenta', label: 'Mi Cuenta', route: '/cuenta', icon: 'UserIcon', section: 'Usuario', orderIndex: 10 }
      ];
      
      let insertedCount = 0;
      for (const menu of basicMenus) {
        try {
          await sequelize.query(`
            INSERT INTO CGBRITO.MENUS (NAME, LABEL, ROUTE, ICON, SECTION, ORDER_INDEX, IS_ACTIVE)
            VALUES (:name, :label, :route, :icon, :section, :orderIndex, 1)
          `, {
            replacements: menu,
            type: 'INSERT'
          });
          
          console.log(`  ‚úÖ Insertado: ${menu.label}`);
          insertedCount++;
        } catch (error) {
          if (error.message.includes('ORA-00001')) {
            console.log(`  ‚ö†Ô∏è Men√∫ ya existe: ${menu.label}`);
          } else {
            console.log(`  ‚ùå Error insertando ${menu.label}: ${error.message}`);
          }
        }
      }
      
      console.log(`\nüìä Resumen de inserci√≥n:`);
      console.log(`   ‚úÖ Insertados: ${insertedCount}`);
      console.log(`   ‚ö†Ô∏è Omitidos: ${basicMenus.length - insertedCount}`);
    }
    
    // 5. Verificar men√∫s despu√©s de la inserci√≥n
    console.log('\n3Ô∏è‚É£ Verificando men√∫s del sistema...');
    const allMenus = await sequelize.query(`
      SELECT ID, NAME, LABEL, ROUTE, SECTION, ORDER_INDEX, IS_ACTIVE
      FROM CGBRITO.MENUS
      ORDER BY ORDER_INDEX
    `, { type: 'SELECT' });
    
    console.log(`üìã Total de men√∫s en el sistema: ${allMenus.length}`);
    
    if (allMenus.length > 0) {
      console.log('\nüçΩÔ∏è Men√∫s disponibles:');
      allMenus.forEach((menu, index) => {
        console.log(`   ${index + 1}. ${menu.LABEL} (${menu.NAME}) - ${menu.SECTION}`);
        console.log(`      Ruta: ${menu.ROUTE}, Orden: ${menu.ORDER_INDEX}`);
      });
    }
    
    console.log('\nüéâ Configuraci√≥n de men√∫s completada!');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await sequelize.close();
  }
}

createMenusTable(); 