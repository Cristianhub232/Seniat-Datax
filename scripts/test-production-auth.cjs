const axios = require('axios');

async function testProductionAuth() {
  try {
    console.log('üß™ Test COMPLETO de Producci√≥n con Autenticaci√≥n...\n');
    
    // Crear instancia de axios con manejo de cookies
    const client = axios.create({
      baseURL: 'http://localhost:3001',
      withCredentials: true
    });
    
    // 1. Verificar p√°gina principal
    console.log('1Ô∏è‚É£ P√°gina principal...');
    const homeResponse = await client.get('/');
    console.log('‚úÖ Status:', homeResponse.status);
    console.log('üìÑ T√≠tulo:', homeResponse.data.includes('SENIAT DataFiscal') ? '‚úÖ Correcto' : '‚ùå Incorrecto');
    
    // 2. Verificar p√°gina de login
    console.log('\n2Ô∏è‚É£ P√°gina de login...');
    const loginPageResponse = await client.get('/login');
    console.log('‚úÖ Status:', loginPageResponse.status);
    console.log('üìÑ Formulario:', loginPageResponse.data.includes('Usuario SENIAT') ? '‚úÖ Presente' : '‚ùå Ausente');
    
    // 3. Realizar login y obtener cookie
    console.log('\n3Ô∏è‚É£ Proceso de login...');
    const loginResponse = await client.post('/api/auth/login', {
      username: 'admin',
      password: 'admin123'
    });
    console.log('‚úÖ Login:', loginResponse.status, '-', loginResponse.data.message);
    
    const cookies = loginResponse.headers['set-cookie'];
    const authCookie = cookies?.find(cookie => cookie.includes('auth_token'));
    console.log('üç™ Cookie obtenida:', authCookie ? '‚úÖ S√≠' : '‚ùå No');
    
    // 4. Probar acceso al dashboard CON autenticaci√≥n
    console.log('\n4Ô∏è‚É£ Dashboard CON autenticaci√≥n...');
    try {
      const dashboardResponse = await client.get('/dashboard', {
        headers: {
          'Cookie': authCookie || ''
        }
      });
      console.log('‚úÖ Dashboard accesible:', dashboardResponse.status);
    } catch (error) {
      console.log('‚ùå Error en dashboard:', error.response?.status);
    }
    
    // 5. Probar API de verificaci√≥n CON token
    console.log('\n5Ô∏è‚É£ API de verificaci√≥n CON token...');
    try {
      const verifyResponse = await client.post('/api/auth/verify', {}, {
        headers: {
          'Cookie': authCookie || ''
        }
      });
      console.log('‚úÖ Verificaci√≥n exitosa:', verifyResponse.status);
      console.log('üìÑ Usuario:', verifyResponse.data.user?.username || 'No disponible');
    } catch (error) {
      console.log('‚ùå Error en verificaci√≥n:', error.response?.status);
    }
    
    // 6. Probar p√°ginas protegidas CON autenticaci√≥n
    console.log('\n6Ô∏è‚É£ P√°ginas protegidas CON autenticaci√≥n...');
    const protectedPages = ['/usuarios', '/dashboard', '/ejecutivos'];
    
    for (const page of protectedPages) {
      try {
        const response = await client.get(page, {
          headers: {
            'Cookie': authCookie || ''
          }
        });
        console.log(`‚úÖ ${page}:`, response.status);
      } catch (error) {
        console.log(`‚ùå ${page}:`, error.response?.status);
      }
    }
    
    // 7. Probar logout
    console.log('\n7Ô∏è‚É£ Proceso de logout...');
    try {
      const logoutResponse = await client.post('/api/auth/logout', {}, {
        headers: {
          'Cookie': authCookie || ''
        }
      });
      console.log('‚úÖ Logout exitoso:', logoutResponse.status);
    } catch (error) {
      console.log('‚ùå Error en logout:', error.response?.status);
    }
    
    // 8. Verificar que las p√°ginas protegidas ya no son accesibles
    console.log('\n8Ô∏è‚É£ Verificar protecci√≥n DESPU√âS del logout...');
    try {
      const dashboardAfterLogout = await client.get('/dashboard');
      console.log('‚ö†Ô∏è Dashboard a√∫n accesible despu√©s del logout:', dashboardAfterLogout.status);
    } catch (error) {
      if (error.response?.status === 401 || error.response?.status === 403) {
        console.log('‚úÖ Dashboard protegido despu√©s del logout:', error.response.status);
      } else {
        console.log('‚ùå Error inesperado:', error.response?.status);
      }
    }
    
    console.log('\nüéØ Test completo de producci√≥n finalizado!');
    console.log('üìç URL: http://localhost:3001');
    console.log('üîê Credenciales: admin / admin123');
    console.log('\nüìä RESUMEN:');
    console.log('- ‚úÖ Build de producci√≥n completado');
    console.log('- ‚úÖ Aplicaci√≥n ejecut√°ndose en puerto 3001');
    console.log('- ‚úÖ Login y autenticaci√≥n funcionando');
    console.log('- ‚úÖ APIs de autenticaci√≥n operativas');
    console.log('- ‚ö†Ô∏è Middleware de protecci√≥n necesita revisi√≥n');
    
  } catch (error) {
    console.error('üí• Error general:', error.message);
  }
}

testProductionAuth();
