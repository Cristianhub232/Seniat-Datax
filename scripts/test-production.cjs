const axios = require('axios');

async function testProduction() {
  try {
    console.log('üß™ Probando aplicaci√≥n en PRODUCCI√ìN...\n');
    
    // 1. Probar p√°gina principal
    console.log('1Ô∏è‚É£ Probando p√°gina principal...');
    try {
      const homeResponse = await axios.get('http://localhost:3001');
      console.log('‚úÖ P√°gina principal:', homeResponse.status);
      console.log('üìÑ T√≠tulo:', homeResponse.data.includes('SENIAT DataFiscal') ? '‚úÖ Correcto' : '‚ùå Incorrecto');
    } catch (error) {
      console.log('‚ùå Error en p√°gina principal:', error.message);
    }
    
    // 2. Probar redirecci√≥n a login
    console.log('\n2Ô∏è‚É£ Probando redirecci√≥n a login...');
    try {
      const loginResponse = await axios.get('http://localhost:3001/login');
      console.log('‚úÖ P√°gina de login:', loginResponse.status);
      console.log('üìÑ Formulario de login:', loginResponse.data.includes('Usuario SENIAT') ? '‚úÖ Presente' : '‚ùå Ausente');
    } catch (error) {
      console.log('‚ùå Error en p√°gina de login:', error.message);
    }
    
    // 3. Probar API de login
    console.log('\n3Ô∏è‚É£ Probando API de login...');
    try {
      const loginApiResponse = await axios.post('http://localhost:3001/api/auth/login', {
        username: 'admin',
        password: 'admin123'
      }, {
        headers: { 'Content-Type': 'application/json' }
      });
      
      console.log('‚úÖ Login API:', loginApiResponse.status);
      console.log('üìÑ Respuesta:', loginApiResponse.data.message);
      
      // Verificar cookie de autenticaci√≥n
      const cookies = loginApiResponse.headers['set-cookie'];
      if (cookies && cookies.some(cookie => cookie.includes('auth_token'))) {
        console.log('üç™ Cookie de autenticaci√≥n:', '‚úÖ Presente');
      } else {
        console.log('üç™ Cookie de autenticaci√≥n:', '‚ùå Ausente');
      }
      
    } catch (error) {
      console.log('‚ùå Error en login API:', error.response?.status || error.message);
      if (error.response?.data) {
        console.log('üìÑ Detalles:', error.response.data);
      }
    }
    
    // 4. Probar acceso al dashboard (sin autenticaci√≥n)
    console.log('\n4Ô∏è‚É£ Probando acceso al dashboard sin autenticaci√≥n...');
    try {
      const dashboardResponse = await axios.get('http://localhost:3001/dashboard');
      console.log('‚ö†Ô∏è Dashboard accesible sin autenticaci√≥n:', dashboardResponse.status);
    } catch (error) {
      if (error.response?.status === 401 || error.response?.status === 403) {
        console.log('‚úÖ Dashboard protegido correctamente:', error.response.status);
      } else {
        console.log('‚ùå Error inesperado en dashboard:', error.response?.status || error.message);
      }
    }
    
    // 5. Probar middleware de autenticaci√≥n
    console.log('\n5Ô∏è‚É£ Probando middleware de autenticaci√≥n...');
    try {
      const protectedResponse = await axios.get('http://localhost:3001/usuarios');
      console.log('‚ö†Ô∏è P√°gina protegida accesible sin autenticaci√≥n:', protectedResponse.status);
    } catch (error) {
      if (error.response?.status === 401 || error.response?.status === 403) {
        console.log('‚úÖ P√°gina protegida correctamente:', error.response.status);
      } else {
        console.log('‚ùå Error inesperado en p√°gina protegida:', error.response?.status || error.message);
      }
    }
    
    // 6. Probar archivos est√°ticos
    console.log('\n6Ô∏è‚É£ Probando archivos est√°ticos...');
    try {
      const iconResponse = await axios.get('http://localhost:3001/icon');
      console.log('‚úÖ Icono:', iconResponse.status);
    } catch (error) {
      console.log('‚ùå Error en icono:', error.response?.status || error.message);
    }
    
    // 7. Probar API de verificaci√≥n
    console.log('\n7Ô∏è‚É£ Probando API de verificaci√≥n...');
    try {
      const verifyResponse = await axios.post('http://localhost:3001/api/auth/verify', {}, {
        headers: { 'Content-Type': 'application/json' }
      });
      console.log('‚ö†Ô∏è Verificaci√≥n accesible sin token:', verifyResponse.status);
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Verificaci√≥n protegida correctamente:', error.response.status);
      } else {
        console.log('‚ùå Error inesperado en verificaci√≥n:', error.response?.status || error.message);
      }
    }
    
    console.log('\nüéØ Test de producci√≥n completado!');
    console.log('üìç URL de la aplicaci√≥n: http://localhost:3001');
    console.log('üîê Usuario de prueba: admin / admin123');
    
  } catch (error) {
    console.error('üí• Error general:', error.message);
  }
}

testProduction();
