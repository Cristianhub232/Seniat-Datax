const { Sequelize } = require('sequelize');
const bcrypt = require('bcrypt');

// Configuraci√≥n Oracle para CGBRITO
const oracleConfig = {
  host: process.env.ORACLE_HOST || '172.16.32.73',
  port: parseInt(process.env.ORACLE_PORT || '1521'),
  database: process.env.ORACLE_DATABASE || 'DWREPO',
  username: process.env.ORACLE_USERNAME || 'CGBRITO',
  password: process.env.ORACLE_PASSWORD || 'cgkbrito',
  schema: process.env.ORACLE_SCHEMA || 'CGBRITO'
};

async function createAuthSystem() {
  const sequelize = new Sequelize({
    dialect: 'oracle',
    host: oracleConfig.host,
    port: oracleConfig.port,
    database: oracleConfig.database,
    username: oracleConfig.username,
    password: oracleConfig.password,
    logging: false,
    dialectOptions: {
      connectString: `${oracleConfig.host}:${oracleConfig.port}/${oracleConfig.database}`,
      schema: oracleConfig.schema
    }
  });

  try {
    console.log('üîå Conectando a Oracle...');
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n exitosa a Oracle');

    console.log('üèóÔ∏è Creando sistema de autenticaci√≥n...');

    // 1. Crear tabla ROLES
    console.log('   üìã Creando tabla ROLES...');
    await sequelize.query(`
      CREATE TABLE ${oracleConfig.schema}.ROLES (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        NAME VARCHAR2(50) NOT NULL UNIQUE,
        DESCRIPTION CLOB,
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('   ‚úÖ Tabla ROLES creada');

    // 2. Crear tabla PERMISSIONS
    console.log('   üìã Creando tabla PERMISSIONS...');
    await sequelize.query(`
      CREATE TABLE ${oracleConfig.schema}.PERMISSIONS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        NAME VARCHAR2(100) NOT NULL UNIQUE,
        DESCRIPTION CLOB,
        RESOURCE_NAME VARCHAR2(100),
        ACTION_NAME VARCHAR2(50),
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('   ‚úÖ Tabla PERMISSIONS creada');

    // 3. Crear tabla USERS
    console.log('   üìã Creando tabla USERS...');
    await sequelize.query(`
      CREATE TABLE ${oracleConfig.schema}.USERS (
        ID VARCHAR2(36) PRIMARY KEY,
        USERNAME VARCHAR2(50) NOT NULL UNIQUE,
        EMAIL VARCHAR2(100) NOT NULL UNIQUE,
        PASSWORD_HASH CLOB NOT NULL,
        FIRST_NAME VARCHAR2(50),
        LAST_NAME VARCHAR2(50),
        ROLE_ID NUMBER NOT NULL,
        STATUS VARCHAR2(20) DEFAULT 'active',
        LAST_LOGIN TIMESTAMP,
        LOGIN_ATTEMPTS NUMBER DEFAULT 0,
        LOCKED_UNTIL TIMESTAMP,
        AVATAR VARCHAR2(255),
        PHONE VARCHAR2(20),
        LOCATION VARCHAR2(100),
        BIO CLOB,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_USERS_ROLE_ID FOREIGN KEY (ROLE_ID) REFERENCES ${oracleConfig.schema}.ROLES(ID)
      )
    `);
    console.log('   ‚úÖ Tabla USERS creada');

    // 4. Crear tabla ROLE_PERMISSIONS
    console.log('   üìã Creando tabla ROLE_PERMISSIONS...');
    await sequelize.query(`
      CREATE TABLE ${oracleConfig.schema}.ROLE_PERMISSIONS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        ROLE_ID NUMBER NOT NULL,
        PERMISSION_ID NUMBER NOT NULL,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_RP_ROLE_ID FOREIGN KEY (ROLE_ID) REFERENCES ${oracleConfig.schema}.ROLES(ID),
        CONSTRAINT FK_RP_PERMISSION_ID FOREIGN KEY (PERMISSION_ID) REFERENCES ${oracleConfig.schema}.PERMISSIONS(ID),
        CONSTRAINT UQ_ROLE_PERMISSION UNIQUE (ROLE_ID, PERMISSION_ID)
      )
    `);
    console.log('   ‚úÖ Tabla ROLE_PERMISSIONS creada');

    // 5. Crear tabla SESSIONS
    console.log('   üìã Creando tabla SESSIONS...');
    await sequelize.query(`
      CREATE TABLE ${oracleConfig.schema}.SESSIONS (
        ID VARCHAR2(36) PRIMARY KEY,
        USER_ID VARCHAR2(36) NOT NULL,
        TOKEN CLOB NOT NULL,
        EXPIRES_AT TIMESTAMP NOT NULL,
        IP_ADDRESS VARCHAR2(45),
        USER_AGENT CLOB,
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_SESSIONS_USER_ID FOREIGN KEY (USER_ID) REFERENCES ${oracleConfig.schema}.USERS(ID)
      )
    `);
    console.log('   ‚úÖ Tabla SESSIONS creada');

    // 6. Crear tabla AUDIT_LOGS
    console.log('   üìã Creando tabla AUDIT_LOGS...');
    await sequelize.query(`
      CREATE TABLE ${oracleConfig.schema}.AUDIT_LOGS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        USER_ID VARCHAR2(36),
        ACTION VARCHAR2(100) NOT NULL,
        RESOURCE_TYPE VARCHAR2(100),
        RESOURCE_ID VARCHAR2(100),
        OLD_VALUES CLOB,
        NEW_VALUES CLOB,
        IP_ADDRESS VARCHAR2(45),
        USER_AGENT CLOB,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_AUDIT_USER_ID FOREIGN KEY (USER_ID) REFERENCES ${oracleConfig.schema}.USERS(ID)
      )
    `);
    console.log('   ‚úÖ Tabla AUDIT_LOGS creada');

    // 7. Crear tabla MENUS
    console.log('   üìã Creando tabla MENUS...');
    await sequelize.query(`
      CREATE TABLE ${oracleConfig.schema}.MENUS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        NAME VARCHAR2(100) NOT NULL,
        DESCRIPTION CLOB,
        ICON VARCHAR2(50),
        ROUTE VARCHAR2(255),
        PARENT_ID NUMBER,
        ORDER_INDEX NUMBER DEFAULT 0,
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_MENUS_PARENT_ID FOREIGN KEY (PARENT_ID) REFERENCES ${oracleConfig.schema}.MENUS(ID)
      )
    `);
    console.log('   ‚úÖ Tabla MENUS creada');

    // 8. Crear tabla ROLE_MENU_PERMISSIONS
    console.log('   üìã Creando tabla ROLE_MENU_PERMISSIONS...');
    await sequelize.query(`
      CREATE TABLE ${oracleConfig.schema}.ROLE_MENU_PERMISSIONS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        ROLE_ID NUMBER NOT NULL,
        MENU_ID NUMBER NOT NULL,
        PERMISSION_ID NUMBER NOT NULL,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_RMP_ROLE_ID FOREIGN KEY (ROLE_ID) REFERENCES ${oracleConfig.schema}.ROLES(ID),
        CONSTRAINT FK_RMP_MENU_ID FOREIGN KEY (MENU_ID) REFERENCES ${oracleConfig.schema}.MENUS(ID),
        CONSTRAINT FK_RMP_PERMISSION_ID FOREIGN KEY (PERMISSION_ID) REFERENCES ${oracleConfig.schema}.PERMISSIONS(ID),
        CONSTRAINT UQ_ROLE_MENU_PERMISSION UNIQUE (ROLE_ID, MENU_ID, PERMISSION_ID)
      )
    `);
    console.log('   ‚úÖ Tabla ROLE_MENU_PERMISSIONS creada');

    // 9. Crear tabla NOTIFICATIONS
    console.log('   üìã Creando tabla NOTIFICATIONS...');
    await sequelize.query(`
      CREATE TABLE ${oracleConfig.schema}.NOTIFICATIONS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        USER_ID VARCHAR2(36) NOT NULL,
        TITLE VARCHAR2(255) NOT NULL,
        MESSAGE CLOB NOT NULL,
        TYPE VARCHAR2(50) DEFAULT 'info',
        IS_READ NUMBER(1) DEFAULT 0,
        READ_AT TIMESTAMP,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_NOTIFICATIONS_USER_ID FOREIGN KEY (USER_ID) REFERENCES ${oracleConfig.schema}.USERS(ID)
      )
    `);
    console.log('   ‚úÖ Tabla NOTIFICATIONS creada');

    console.log('‚úÖ Sistema de autenticaci√≥n creado completamente');

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await sequelize.close();
    console.log('üîå Conexi√≥n cerrada');
  }
}

createAuthSystem();

