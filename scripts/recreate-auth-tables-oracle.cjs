const oracledb = require('oracledb');

// Configuraci√≥n de Oracle
const dbConfig = {
  user: 'CGBRITO',
  password: 'cgkbrito',
  connectString: '172.16.32.73:1521/DWREPO',
  schema: 'CGBRITO'
};

async function recreateAuthTables() {
  let connection;
  
  try {
    console.log('üîå Conectando a Oracle...');
    connection = await oracledb.getConnection(dbConfig);
    console.log('‚úÖ Conexi√≥n exitosa a Oracle');

    // Lista de tablas a eliminar (en orden de dependencias)
    const tablesToDrop = [
      'ROLE_MENU_PERMISSIONS',
      'ROLE_PERMISSIONS', 
      'NOTIFICATIONS',
      'AUDIT_LOGS',
      'SESSIONS',
      'USERS',
      'PERMISSIONS',
      'MENUS',
      'ROLES'
    ];

    // Eliminar tablas existentes
    console.log('üóëÔ∏è  Eliminando tablas existentes...');
    for (const tableName of tablesToDrop) {
      try {
        await connection.execute(`DROP TABLE CGBRITO.${tableName} CASCADE CONSTRAINTS`);
        console.log(`   ‚úÖ Tabla ${tableName} eliminada`);
      } catch (error) {
        if (error.message.includes('does not exist')) {
          console.log(`   ‚ö†Ô∏è  Tabla ${tableName} no exist√≠a`);
        } else {
          console.log(`   ‚ùå Error eliminando ${tableName}:`, error.message);
        }
      }
    }

    // Crear tabla de roles
    console.log('\nüìã Creando tabla ROLES...');
    await connection.execute(`
      CREATE TABLE CGBRITO.ROLES (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        NAME VARCHAR2(100) NOT NULL UNIQUE,
        DESCRIPTION VARCHAR2(500),
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Tabla ROLES creada');

    // Crear tabla de permisos
    console.log('üìã Creando tabla PERMISSIONS...');
    await connection.execute(`
      CREATE TABLE CGBRITO.PERMISSIONS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        NAME VARCHAR2(100) NOT NULL UNIQUE,
        DESCRIPTION VARCHAR2(500),
        RESOURCE_NAME VARCHAR2(100),
        ACTION_NAME VARCHAR2(50),
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Tabla PERMISSIONS creada');

    // Crear tabla de relaci√≥n roles-permisos
    console.log('üìã Creando tabla ROLE_PERMISSIONS...');
    await connection.execute(`
      CREATE TABLE CGBRITO.ROLE_PERMISSIONS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        ROLE_ID NUMBER NOT NULL,
        PERMISSION_ID NUMBER NOT NULL,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_RP_ROLE FOREIGN KEY (ROLE_ID) REFERENCES CGBRITO.ROLES(ID),
        CONSTRAINT FK_RP_PERMISSION FOREIGN KEY (PERMISSION_ID) REFERENCES CGBRITO.PERMISSIONS(ID),
        CONSTRAINT UQ_ROLE_PERMISSION UNIQUE (ROLE_ID, PERMISSION_ID)
      )
    `);
    console.log('‚úÖ Tabla ROLE_PERMISSIONS creada');

    // Crear tabla de usuarios
    console.log('üìã Creando tabla USERS...');
    await connection.execute(`
      CREATE TABLE CGBRITO.USERS (
        ID VARCHAR2(36) PRIMARY KEY,
        USERNAME VARCHAR2(100) NOT NULL UNIQUE,
        EMAIL VARCHAR2(255) UNIQUE,
        PASSWORD_HASH CLOB NOT NULL,
        FIRST_NAME VARCHAR2(100),
        LAST_NAME VARCHAR2(100),
        ROLE_ID NUMBER,
        STATUS VARCHAR2(20) DEFAULT 'active',
        LAST_LOGIN TIMESTAMP,
        LOGIN_ATTEMPTS NUMBER DEFAULT 0,
        LOCKED_UNTIL TIMESTAMP,
        AVATAR VARCHAR2(255),
        PHONE VARCHAR2(20),
        LOCATION VARCHAR2(100),
        BIO CLOB,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_USERS_ROLE FOREIGN KEY (ROLE_ID) REFERENCES CGBRITO.ROLES(ID)
      )
    `);
    console.log('‚úÖ Tabla USERS creada');

    // Crear tabla de sesiones
    console.log('üìã Creando tabla SESSIONS...');
    await connection.execute(`
      CREATE TABLE CGBRITO.SESSIONS (
        ID VARCHAR2(36) PRIMARY KEY,
        USER_ID VARCHAR2(36) NOT NULL,
        TOKEN_HASH VARCHAR2(255) NOT NULL UNIQUE,
        EXPIRES_AT TIMESTAMP NOT NULL,
        IP_ADDRESS VARCHAR2(45),
        USER_AGENT VARCHAR2(500),
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_SESSIONS_USER FOREIGN KEY (USER_ID) REFERENCES CGBRITO.USERS(ID)
      )
    `);
    console.log('‚úÖ Tabla SESSIONS creada');

    // Crear tabla de auditor√≠a
    console.log('üìã Creando tabla AUDIT_LOGS...');
    await connection.execute(`
      CREATE TABLE CGBRITO.AUDIT_LOGS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        USER_ID VARCHAR2(36),
        ACTION_NAME VARCHAR2(100) NOT NULL,
        RESOURCE_NAME VARCHAR2(100),
        RESOURCE_ID VARCHAR2(100),
        DETAILS CLOB,
        IP_ADDRESS VARCHAR2(45),
        USER_AGENT VARCHAR2(500),
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_AUDIT_USER FOREIGN KEY (USER_ID) REFERENCES CGBRITO.USERS(ID)
      )
    `);
    console.log('‚úÖ Tabla AUDIT_LOGS creada');

    // Crear tabla de men√∫s
    console.log('üìã Creando tabla MENUS...');
    await connection.execute(`
      CREATE TABLE CGBRITO.MENUS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        NAME VARCHAR2(100) NOT NULL,
        PATH VARCHAR2(200),
        ICON VARCHAR2(100),
        PARENT_ID NUMBER,
        ORDER_INDEX NUMBER DEFAULT 0,
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_MENUS_PARENT FOREIGN KEY (PARENT_ID) REFERENCES CGBRITO.MENUS(ID)
      )
    `);
    console.log('‚úÖ Tabla MENUS creada');

    // Crear tabla de relaci√≥n roles-men√∫s
    console.log('üìã Creando tabla ROLE_MENU_PERMISSIONS...');
    await connection.execute(`
      CREATE TABLE CGBRITO.ROLE_MENU_PERMISSIONS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        ROLE_ID NUMBER NOT NULL,
        MENU_ID NUMBER NOT NULL,
        PERMISSION_ID NUMBER NOT NULL,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_RMP_ROLE FOREIGN KEY (ROLE_ID) REFERENCES CGBRITO.ROLES(ID),
        CONSTRAINT FK_RMP_MENU FOREIGN KEY (MENU_ID) REFERENCES CGBRITO.MENUS(ID),
        CONSTRAINT FK_RMP_PERMISSION FOREIGN KEY (PERMISSION_ID) REFERENCES CGBRITO.PERMISSIONS(ID)
      )
    `);
    console.log('‚úÖ Tabla ROLE_MENU_PERMISSIONS creada');

    // Crear tabla de notificaciones
    console.log('üìã Creando tabla NOTIFICATIONS...');
    await connection.execute(`
      CREATE TABLE CGBRITO.NOTIFICATIONS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        USER_ID VARCHAR2(36) NOT NULL,
        TITLE VARCHAR2(200) NOT NULL,
        MESSAGE CLOB,
        TYPE VARCHAR2(50) DEFAULT 'info',
        IS_READ NUMBER(1) DEFAULT 0,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_NOTIFICATIONS_USER FOREIGN KEY (USER_ID) REFERENCES CGBRITO.USERS(ID)
      )
    `);
    console.log('‚úÖ Tabla NOTIFICATIONS creada');

    // Insertar datos iniciales
    console.log('\nüìù Insertando datos iniciales...');

    // Insertar roles b√°sicos
    console.log('   Insertando roles...');
    await connection.execute(`
      INSERT INTO CGBRITO.ROLES (NAME, DESCRIPTION) VALUES ('ADMIN', 'Administrador del sistema')
    `);
    await connection.execute(`
      INSERT INTO CGBRITO.ROLES (NAME, DESCRIPTION) VALUES ('USER', 'Usuario est√°ndar')
    `);
    await connection.execute(`
      INSERT INTO CGBRITO.ROLES (NAME, DESCRIPTION) VALUES ('AUDITOR', 'Auditor del sistema')
    `);

    // Insertar permisos b√°sicos
    console.log('   Insertando permisos...');
    const permissions = [
      ['users.read', 'Ver usuarios', 'users', 'read'],
      ['users.create', 'Crear usuarios', 'users', 'create'],
      ['users.update', 'Actualizar usuarios', 'users', 'update'],
      ['users.delete', 'Eliminar usuarios', 'users', 'delete'],
      ['roles.read', 'Ver roles', 'roles', 'read'],
      ['roles.create', 'Crear roles', 'roles', 'create'],
      ['roles.update', 'Actualizar roles', 'roles', 'update'],
      ['roles.delete', 'Eliminar roles', 'roles', 'delete'],
      ['dashboard.access', 'Acceso al dashboard', 'dashboard', 'access'],
      ['reports.access', 'Acceso a reportes', 'reports', 'access']
    ];

    for (const [name, description, resource, action] of permissions) {
      await connection.execute(`
        INSERT INTO CGBRITO.PERMISSIONS (NAME, DESCRIPTION, RESOURCE_NAME, ACTION_NAME) 
        VALUES (:1, :2, :3, :4)
      `, [name, description, resource, action]);
    }

    // Insertar men√∫s b√°sicos
    console.log('   Insertando men√∫s...');
    const menus = [
      ['Dashboard', '/dashboard', 'home', 1],
      ['Usuarios', '/usuarios', 'users', 2],
      ['Roles', '/roles', 'shield', 3],
      ['Reportes', '/reportes', 'file-text', 4],
      ['Notificaciones', '/notificaciones', 'bell', 5]
    ];

    for (const [name, path, icon, orderIndex] of menus) {
      await connection.execute(`
        INSERT INTO CGBRITO.MENUS (NAME, PATH, ICON, ORDER_INDEX) 
        VALUES (:1, :2, :3, :4)
      `, [name, path, icon, orderIndex]);
    }

    // Hacer commit de los cambios
    await connection.commit();
    console.log('‚úÖ Datos iniciales insertados');
    console.log('üéâ Todas las tablas de autenticaci√≥n recreadas exitosamente');

  } catch (error) {
    console.error('‚ùå Error:', error.message);
    if (connection) {
      await connection.rollback();
    }
  } finally {
    if (connection) {
      try {
        await connection.close();
        console.log('üîå Conexi√≥n cerrada');
      } catch (error) {
        console.error('Error cerrando conexi√≥n:', error.message);
      }
    }
  }
}

recreateAuthTables(); 