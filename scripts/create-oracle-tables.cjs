const { Sequelize } = require('sequelize');

// Configuraci√≥n Oracle
const sequelize = new Sequelize({
  dialect: 'oracle',
  host: '172.16.32.73',
  port: 1521,
  database: 'DWREPO',
  username: 'CGBRITO',
  password: 'cgkbrito',
  logging: console.log,
  dialectOptions: {
    connectString: '172.16.32.73:1521/DWREPO',
    schema: 'CGBRITO'
  }
});

async function createTables() {
  try {
    console.log('üîå Conectando a Oracle...');
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n exitosa a Oracle');

    // Crear tabla de roles
    console.log('üìã Creando tabla ROLES...');
    await sequelize.query(`
      CREATE TABLE CGBRITO.ROLES (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        NAME VARCHAR2(100) NOT NULL UNIQUE,
        DESCRIPTION VARCHAR2(500),
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Tabla ROLES creada');

    // Crear tabla de permisos
    console.log('üìã Creando tabla PERMISSIONS...');
    await sequelize.query(`
      CREATE TABLE CGBRITO.PERMISSIONS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        NAME VARCHAR2(100) NOT NULL UNIQUE,
        DESCRIPTION VARCHAR2(500),
        MODULE VARCHAR2(100),
        ACTION VARCHAR2(50),
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Tabla PERMISSIONS creada');

    // Crear tabla de usuarios
    console.log('üìã Creando tabla USERS...');
    await sequelize.query(`
      CREATE TABLE CGBRITO.USERS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        USERNAME VARCHAR2(100) NOT NULL UNIQUE,
        EMAIL VARCHAR2(255) UNIQUE,
        PASSWORD_HASH VARCHAR2(255) NOT NULL,
        FIRST_NAME VARCHAR2(100),
        LAST_NAME VARCHAR2(100),
        ROLE_ID NUMBER,
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        LAST_LOGIN TIMESTAMP,
        LOGIN_ATTEMPTS NUMBER DEFAULT 0,
        LOCKED_UNTIL TIMESTAMP,
        AVATAR_URL VARCHAR2(500),
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_USERS_ROLE FOREIGN KEY (ROLE_ID) REFERENCES CGBRITO.ROLES(ID)
      )
    `);
    console.log('‚úÖ Tabla USERS creada');

    // Crear tabla de relaci√≥n roles-permisos
    console.log('üìã Creando tabla ROLE_PERMISSIONS...');
    await sequelize.query(`
      CREATE TABLE CGBRITO.ROLE_PERMISSIONS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        ROLE_ID NUMBER NOT NULL,
        PERMISSION_ID NUMBER NOT NULL,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_RP_ROLE FOREIGN KEY (ROLE_ID) REFERENCES CGBRITO.ROLES(ID),
        CONSTRAINT FK_RP_PERMISSION FOREIGN KEY (PERMISSION_ID) REFERENCES CGBRITO.PERMISSIONS(ID),
        CONSTRAINT UQ_ROLE_PERMISSION UNIQUE (ROLE_ID, PERMISSION_ID)
      )
    `);
    console.log('‚úÖ Tabla ROLE_PERMISSIONS creada');

    // Crear tabla de men√∫s
    console.log('üìã Creando tabla MENUS...');
    await sequelize.query(`
      CREATE TABLE CGBRITO.MENUS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        NAME VARCHAR2(100) NOT NULL,
        PATH VARCHAR2(200),
        ICON VARCHAR2(100),
        PARENT_ID NUMBER,
        ORDER_INDEX NUMBER DEFAULT 0,
        IS_ACTIVE NUMBER(1) DEFAULT 1,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_MENUS_PARENT FOREIGN KEY (PARENT_ID) REFERENCES CGBRITO.MENUS(ID)
      )
    `);
    console.log('‚úÖ Tabla MENUS creada');

    // Crear tabla de notificaciones
    console.log('üìã Creando tabla NOTIFICATIONS...');
    await sequelize.query(`
      CREATE TABLE CGBRITO.NOTIFICATIONS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        USER_ID NUMBER NOT NULL,
        TITLE VARCHAR2(200) NOT NULL,
        MESSAGE VARCHAR2(1000),
        TYPE VARCHAR2(50) DEFAULT 'info',
        IS_READ NUMBER(1) DEFAULT 0,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_NOTIFICATIONS_USER FOREIGN KEY (USER_ID) REFERENCES CGBRITO.USERS(ID)
      )
    `);
    console.log('‚úÖ Tabla NOTIFICATIONS creada');

    // Crear tabla de sesiones
    console.log('üìã Creando tabla SESSIONS...');
    await sequelize.query(`
      CREATE TABLE CGBRITO.SESSIONS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        USER_ID NUMBER NOT NULL,
        SESSION_TOKEN VARCHAR2(500) NOT NULL UNIQUE,
        EXPIRES_AT TIMESTAMP NOT NULL,
        IP_ADDRESS VARCHAR2(45),
        USER_AGENT VARCHAR2(500),
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_SESSIONS_USER FOREIGN KEY (USER_ID) REFERENCES CGBRITO.USERS(ID)
      )
    `);
    console.log('‚úÖ Tabla SESSIONS creada');

    // Insertar datos iniciales
    console.log('üìù Insertando datos iniciales...');

    // Insertar roles b√°sicos
    await sequelize.query(`
      INSERT INTO CGBRITO.ROLES (NAME, DESCRIPTION) VALUES 
      ('ADMIN', 'Administrador del sistema'),
      ('USER', 'Usuario est√°ndar'),
      ('AUDITOR', 'Auditor del sistema')
    `);

    // Insertar permisos b√°sicos
    await sequelize.query(`
      INSERT INTO CGBRITO.PERMISSIONS (NAME, DESCRIPTION, MODULE, ACTION) VALUES 
      ('users.read', 'Ver usuarios', 'users', 'read'),
      ('users.create', 'Crear usuarios', 'users', 'create'),
      ('users.update', 'Actualizar usuarios', 'users', 'update'),
      ('users.delete', 'Eliminar usuarios', 'users', 'delete'),
      ('roles.read', 'Ver roles', 'roles', 'read'),
      ('roles.create', 'Crear roles', 'roles', 'create'),
      ('roles.update', 'Actualizar roles', 'roles', 'update'),
      ('roles.delete', 'Eliminar roles', 'roles', 'delete'),
      ('dashboard.access', 'Acceso al dashboard', 'dashboard', 'access'),
      ('reports.access', 'Acceso a reportes', 'reports', 'access')
    `);

    // Insertar usuario administrador
    const bcrypt = require('bcryptjs');
    const adminPassword = await bcrypt.hash('admin123', 10);
    
    await sequelize.query(`
      INSERT INTO CGBRITO.USERS (USERNAME, EMAIL, PASSWORD_HASH, FIRST_NAME, LAST_NAME, ROLE_ID) VALUES 
      ('admin', 'admin@seniat.gob.ve', '${adminPassword}', 'Administrador', 'Sistema', 1)
    `);

    // Insertar men√∫s b√°sicos
    await sequelize.query(`
      INSERT INTO CGBRITO.MENUS (NAME, PATH, ICON, ORDER_INDEX) VALUES 
      ('Dashboard', '/dashboard', 'home', 1),
      ('Usuarios', '/usuarios', 'users', 2),
      ('Roles', '/roles', 'shield', 3),
      ('Reportes', '/reportes', 'file-text', 4),
      ('Notificaciones', '/notificaciones', 'bell', 5)
    `);

    console.log('‚úÖ Datos iniciales insertados');
    console.log('üéâ Todas las tablas creadas exitosamente');
    console.log('üë§ Usuario administrador creado: admin / admin123');

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await sequelize.close();
  }
}

createTables(); 